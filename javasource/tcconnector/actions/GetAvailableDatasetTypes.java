// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package tcconnector.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import tcconnector.foundation.TcConnection;
import tcconnector.internal.foundation.Constants;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

/**
 * SOA URL:
 * Core-2010-04-DataManagement/getAvailableTypesWithDisplayNames
 * 
 * Tc Version:
 * Teamcenter 8.2
 * 
 * Returns list of available Dataset Types. This Dataset Type is required while creating a dataset.
 * 
 * Input -
 * - None
 * 
 * Output -
 * - List of Teamcenter Dataset Types
 * 
 * 
 */
public class GetAvailableDatasetTypes extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String ConfigurationName;

	public GetAvailableDatasetTypes(IContext context, java.lang.String ConfigurationName)
	{
		super(context);
		this.ConfigurationName = ConfigurationName;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		List<IMendixObject> iMendixObjectList = new ArrayList<IMendixObject>();

		try {
			// retrieve dataset types with display name
			JSONObject getAvailableTypesWithDisplayNamesResponse = getAvailableTypesWithDisplayNames();
			JSONObject inputClassToTypesJO = getAvailableTypesWithDisplayNamesResponse
					.getJSONObject("inputClassToTypes");
			JSONArray DatasetTypes = inputClassToTypesJO.getJSONArray("Dataset");

			for (int i = 0; i < DatasetTypes.length(); i++) {
				JSONObject DatasetTypeJO = DatasetTypes.getJSONObject(i);
				IMendixObject datasetType = Core.instantiate(getContext(), tcconnector.proxies.Pair.entityName);
				datasetType.setValue(getContext(), "Name", DatasetTypeJO.getString("displayType"));
				datasetType.setValue(getContext(), "Value", DatasetTypeJO.getString("type"));
				iMendixObjectList.add(datasetType);
			}
		} catch (Exception e) {
			String message = "Retrieving available dataset types failed."
					+ "Please contact your system administrator for further assistance.";
			Constants.LOGGER.error(message + e.getMessage());
			throw e;
		}
		return iMendixObjectList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetAvailableDatasetTypes";
	}

	// BEGIN EXTRA CODE

	private ArrayList<String> createSubstitutionsFor_getAvailableTypesWithDisplayNames() {
		ArrayList<String> Substitutions = new java.util.ArrayList<String>();
		Substitutions.add(Constants.TCTYPE_DATASET);
		return Substitutions;
	}

	private static String createServiceInput(String jsonTemplate, ArrayList<String> substitutions) {
		for (int i = 0; i < substitutions.size(); i++) {
			String replacement = substitutions.get(i);
			String target = "{" + (i + 1) + "}";
			jsonTemplate = jsonTemplate.replace(target, replacement);
		}
		return jsonTemplate;
	}

	private JSONObject getAvailableTypesWithDisplayNames() throws Exception {

		// getAvailableTypesWithDisplayNames JSON Template
		String getAvailableTypesWithDisplayNamesJT = "{\r\n" + "        \"classes\": [\r\n" + "            {\r\n"
				+ "                \"baseClass\": \"Dataset\",\r\n" + "                \"exclusionTypes\": []\r\n"
				+ "            }\r\n" + "        ]\r\n" + "    }";
		// substitutions for getAvailableTypesWithDisplayNames
		ArrayList<String> Substitutions = createSubstitutionsFor_getAvailableTypesWithDisplayNames();
		getAvailableTypesWithDisplayNamesJT = createServiceInput(getAvailableTypesWithDisplayNamesJT, Substitutions);

		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_GETAVAILABLETYPESWITHDISPLAYNAMES,
				getAvailableTypesWithDisplayNamesJT, new JSONObject(), ConfigurationName);
	}
	// END EXTRA CODE
}
