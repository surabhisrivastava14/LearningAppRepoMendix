// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package tcconnector.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import tcconnector.foundation.exceptions.NotLoadedExcpetion;
import tcconnector.internal.foundation.Constants;
import tcconnector.proxies.FindUsersTasksResponse;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;

/**
 * SOA URL: 
 * Core-2007-01-Session/getTCSessionInfo
 * Core-2006-03-DataManagement/getProperties
 * 
 * Tc Version:
 * Teamcenter 2007 
 * 
 * Description:
 * This actions finds Task Inboxes  of logged-in user, Task Inboxes contains 'Task to Perform' and 'Task to Track'
 * Returns:
 * An entity of type FindUsersTasksResponse. Task Inboxes can be retrieved using association TcConnector.TaskInbox_FindUsersTasksResponse. tasks_to_perform and tasks_to_track is a association between EPMTask and TaskInbox.Partial errors can be retrieved using association TcConnector.ResponseData/TcConnector.PartialErrors.
 */
public class FindUsersTasks extends CustomJavaAction<IMendixObject>
{
	private java.lang.String ConfigurationName;

	public FindUsersTasks(IContext context, java.lang.String ConfigurationName)
	{
		super(context);
		this.ConfigurationName = ConfigurationName;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		FindUsersTasksResponse response = new FindUsersTasksResponse(getContext());
		try {
			GetTcSessionInformation getTcSessionInfo = new GetTcSessionInformation(getContext(),
					"User=TcConnector.User;Group=TcConnector.Group;TaskInbox=TcConnector.TaskInbox", ConfigurationName);
			IMendixObject getTcSessionInfoResponse = (IMendixObject) getTcSessionInfo.execute();
			IMendixObjectMember<?> user = getTcSessionInfoResponse.getMember(getContext(), "TcConnector.user__");
			IMendixObject userObject = ((IMendixIdentifier) user.getValue(getContext())).getObject();
			List<IMendixObject> subscribedInboxList = Core.retrieveByPath(getContext(), userObject,
					"TcConnector.subscribed_inboxes");
			for (int inboxCnt = 0; inboxCnt < subscribedInboxList.size(); inboxCnt++) {
				IMendixObject taskInboxObject = subscribedInboxList.get(inboxCnt);
				String BusinessMappings = "TaskInbox=TcConnector.TaskInbox;EPMTask=TcConnector.EPMTask";

				List<IMendixObject> taskInboxList = new ArrayList<IMendixObject>();
				taskInboxList.add(taskInboxObject);
				GetProperties getProperties = new GetProperties(getContext(), taskInboxList, BusinessMappings,
						ConfigurationName);
				boolean getPropertiesResponse = getProperties.executeAction();

				if (getPropertiesResponse)
					taskInboxObject.setValue(getContext(), "TcConnector.TaskInbox_FindUsersTasksResponse",
							response.getMendixObject().getId());
			}
		} catch (NotLoadedExcpetion e) {
			String message = e.getMessage();
			Constants.LOGGER.error(message + e.getMessage());
			message += "Please contact your system administrator for further assistance.";
			throw e;
		}
		return response.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "FindUsersTasks";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
