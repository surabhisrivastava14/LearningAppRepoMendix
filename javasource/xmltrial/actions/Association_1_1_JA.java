// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package xmltrial.actions;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import xmltrial.proxies.CustomerAddress;
import xmltrial.proxies.CustomerDetail;
import xmltrial.proxies.XmlDocument;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Association_1_1_JA extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __Parameter;
	private xmltrial.proxies.XmlDocument Parameter;

	public Association_1_1_JA(IContext context, IMendixObject Parameter)
	{
		super(context);
		this.__Parameter = Parameter;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.Parameter = this.__Parameter == null ? null : xmltrial.proxies.XmlDocument.initialize(getContext(), __Parameter);

		// BEGIN USER CODE
		// converted mendix entity object into java object
		XmlDocument textFile = Parameter.initialize(getContext(), __Parameter);
		// created byteArrayOutputStream to read contents
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		// get content using byteArryOutput stream
		// GetContents Function needs output stream object (Mandatory)
		textFile.getContents(getContext(), outputStream);
		// convert file into input stream
		InputStream xmlInputStream = new ByteArrayInputStream(outputStream.toByteArray());
//		// to read input stream data
//		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(xmlInputStream);
			document.getDocumentElement().normalize();

			System.out.println("Root element: " + document.getDocumentElement().getNodeName());

			NodeList customerNodesList = document.getElementsByTagName("Customer");
			System.out.println("Customer length" + customerNodesList.getLength());

			//create customer list
			List<IMendixObject> myCustObjectList = new ArrayList<>();


			// nodeList is not iterable, so we are using for loop
			for (int itr = 0; itr < customerNodesList.getLength(); itr++) {
				Node node = customerNodesList.item(itr);
				
				System.out.println("\n Customer Node Name :" + node.getNodeName());
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					
					//typecasting
					Element eElement = (Element) node;
					String name = eElement.getElementsByTagName("Name").item(0).getTextContent();
					String CustId = eElement.getElementsByTagName("CustId").item(0).getTextContent();
					String Address = eElement.getElementsByTagName("Address").item(0).getTextContent();
					String City = eElement.getElementsByTagName("City").item(0).getTextContent();
					
					System.out.println("Details" + name+ CustId + Address +City);

					//create objects
					CustomerAddress address = new CustomerAddress(getContext());
					CustomerDetail customer = new CustomerDetail(getContext());
					
					address.setAddress(Address);
					address.setCity(City);
					
//					//commit address
//					Core.commit(getContext(), address.getMendixObject());
					
					customer.setName(name);
					customer.setCustId(CustId);
					customer.setCustomerDetail_CustomerAddress(address);
					
					// add to list
					myCustObjectList.add(customer.getMendixObject());
			}
			}
			// Commit the list of objects
			Core.commit(getContext(), myCustObjectList);

			return null;
		} catch (Exception e) {
			return null;
		}
		

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Association_1_1_JA";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
